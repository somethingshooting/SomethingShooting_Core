@startuml MainSystemClasses
package Characters{
    package Player{
        class PlayerState <<MonoBehaviour>>{
            + Parameter CurrentHP
            + Parameter MaxHP
            + Parameter ATK

            + Parameter FireAttribiteCorrection
            + Parameter RecastTimeCorrection
        }

        class PlayerMover <<MonoBehaviour>>{
            + Vecter2 Screen
            + float Speed
            + IInputProvider InputProvider

            - void Start()
            - void Update()
            + void OndrawGizmos()
        }
    }

    package Enemy{
        class EnemyState <<MonoBehaviour>>{
            + Parameter CurrentHP
            + Parameter MaxHP
            + Parameter ATK
        }

        abstract EnemyBehaviour <<MonoBehaviour>>{
            + IObserbable<Unit> DeadSubject
            # Subject<Unit> _DeadSubject

            # {abstract} void Init()
            + void GetDamage()
        }
        EnemyState <- EnemyBehaviour
    }

    interface IHitPointObject{
        IObserbable<Unit> DeadSubject

        void GetDamage(int vaule, SkillAttributeType Attribute)
    }
    IHitPointObject <|.. EnemyBehaviour

    interface ICharacterState{
        Parameter CurrentHP
        Parameter MaxHP
        Parameter ATK
    }
    ICharacterState <|.. PlayerState
    ICharacterState <|.. EnemyState

    class Parameter{
        + int Value
        + int DefaultValue
        - ReactiveProperty<Dictionery<object, int>> _CorrectionList

        - void UpdateVaule()
        + void AddCorrection(object source, int value)
        + void RemoveCrrection(object source)
    }
}

package Bullet{
    abstract BulletBase <<MonoBehaviour>>{

    }

    interface IBulletMove{
        void Move()
    }
    IBulletMove <|.. BulletBase

    interface IBullet{
        void OnDestroy()
    }
    IBullet <|.. BulletBase
}

package Skill{
    class SkillController <<MonoBehaviour>>{
        + List<ActiveSkill> ActiveSkillList
        + List<PassiveSkill> PassiveSkillList
    }

    abstract ActiveSkill <<MonoBehaviour>>{
        + {abstract} string SkillName
        + {abstract} SkillAttributeType SkillAttribute
        + IReadOnryReactiveProperty<bool> IsRunning
        # BoolReactiveProperty _IsRunning
        + float RecastTime
        + float RecastTimeCount
        + Parameter RecastTimeCorrection
        # float SkillTIme
        # float SkillTimeCount

        # {abstract} void Init()
        + void PlaySkill()
        # {abstract} void SkillStart()
        # {abstract} void SkillUpdate()
        # void SkillEnd()
        # void Start()
    }

    abstract PassiveSkill <<MonoBehaviour>>{
        + {abstract} string SkillName
        + {abstract} SkillAttributeType SkillAttribute
        + IReadOnryReactiveProperty<bool> IsRunning
        # BoolReactiveProperty _IsRunning

        # {abstract} void Init()
        + void PlaySkill()
        # void SkillStart()
        # {abstract} void SkillUpdate()
        # void Start()
    }

    enum SkillAttributeType{
        Ice
        Fire
        atc...
    }
    SkillAttributeType <- ISkill

    interface ISkill{
        string SkillName
        SkillAttributeType SkillAttribute
        IReadOnryReactiveProperty<bool> IsRunning

        void PlaySkill()
    }
    ISkill <|.. ActiveSkill
    ISkill <|.. PassiveSkill
}

package GameSystems{
    class InputController <<MonoBehaviour>>{
        - void SetPlayerMoveDirection()
        - void SetNormalShotButton()
    }
    IInputProvider <|. InputController

    interface IInputProvider{
        IReadOnryReactiveProperty<Vecter3> PlayerMoveDirection
        IReadOnryReactiveProperty<bool> NormalShotButtonPushed
    }
    SkillController <-- IInputProvider
    PlayerMover <-- IInputProvider
}

package Quest{
    class QuestData <<ScriptableObject>>{
        + EnemyData[] Enemys
    }

    class EnemyData {
        + Vecter3 Position
        + GameObject Prefab
        + bool Frag
    }

    class StageData <<MonoBehaviour>>{
        - QuestData[] quests
    }
}

@enduml