@startuml MainSystemClasses
package Player{
    class PlayerMover <<MonoBehaviour>>{
        + Vecter2 Screen
        + float Speed
        + IInputProvider InputProvider

        - void Start()
        - void Update()
        + void OndrawGizmos()
    }
}

package Enemy{
    class EnemyController <<MonoBehaviour>>{

    }
}

package Characters{
    class CharacterState <<MonoBehaviour>>{
        + Parameter CurrentHP
        + Parameter MaxHP
        + Parameter ATK
        + Parameter DEF

        + Parameter FireAttribiteCorrection
        + Parameter RecastTimeCorrection
    }

    class Parameter{
        + int Value
        + int DefaultValue
        - ReactiveProperty<Dictionery<object, int>> _CorrectionList

        - void UpdateVaule()
        + void AddCorrection(object source, int value)
        + void RemoveCrrection(object source)
    }

    interface ICharacterMover{
        void Move()
    }
    ICharacterMover <|-- PlayerMover

    interface ICharacter{

    }

    interface IGetDamage{
        void GetDamage(int vaule, SkillAttributeType Attribute)
    }
}

package Bullet{
    abstract BulletBase <<MonoBehaviour>>{

    }

    interface IBulletMove{
        void Move()
    }
    IBulletMove <|-- BulletBase

    interface IBullet{
        void OnDestroy()
    }
    IBullet <|-- BulletBase
}

package Skill{
    class SkillController <<MonoBehaviour>>{
        + List<ActiveSkill> ActiveSkillList
        + List<PassiveSkill> PassiveSkillList
    }

    abstract ActiveSkill <<MonoBehaviour>>{
        + {abstract} string SkillName
        + {abstract} SkillAttributeType SkillAttribute
        + IReadOnryReactiveProperty<bool> IsRunning
        # BoolReactiveProperty _IsRunning
        + float RecastTime
        + float RecastTimeCount
        + Parameter RecastTimeCorrection
        # float SkillTIme
        # float SkillTimeCount

        # {abstract} void Init()
        + void PlaySkill()
        # {abstract} void SkillStart()
        # {abstract} void SkillUpdate()
        # void SkillEnd()
        # void Start()
    }

    abstract PassiveSkill <<MonoBehaviour>>{
        + {abstract} string SkillName
        + {abstract} SkillAttributeType SkillAttribute
        + IReadOnryReactiveProperty<bool> IsRunning
        # BoolReactiveProperty _IsRunning

        # {abstract} void Init()
        + void PlaySkill()
        # void SkillStart()
        # {abstract} void SkillUpdate()
        # void Start()
    }

    enum SkillAttributeType{
        Ice
        Fire
        atc...
    }
    ISkill <- SkillAttributeType

    interface ISkill{
        string SkillName
        SkillAttributeType SkillAttribute
        IReadOnryReactiveProperty<bool> IsRunning

        void PlaySkill()
    }
    ISkill <|-- ActiveSkill
    ISkill <|-- PassiveSkill
}

package GameSystems{
    class InputController <<MonoBehaviour>>{
        - void SetPlayerMoveDirection()
        - void SetNormalShotButton()
    }
    IInputProvider <|-down- InputController

    interface IInputProvider{
        IReadOnryReactiveProperty<Vecter3> PlayerMoveDirection
        IReadOnryReactiveProperty<bool> NormalShotButtonPushed
    }
    SkillController <-- IInputProvider
    PlayerMover <-- IInputProvider
}

package Quest{
    class QuestScaner <<MonoBehaviour>>{
        - string _Name

        - void Start()
        - GameObject[] SortWithZ(GameObject[] objects)
    }

    class QuestData <<ScriptableObject>>{
        + EnemyData[] Enemys
    }

    class EnemyData {
        + Vecter3 Position
        + GameObject Prefab
        + bool Frag
    }

    class QuestFlagObject <<MonoBehaviour>>{
        + void OndrawGizmos()
    }

    class StageData <<MonoBehaviour>>{
        - QuestData[] quests
    }
}

@enduml